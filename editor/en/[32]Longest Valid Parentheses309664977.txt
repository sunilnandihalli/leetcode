from functools import lru_cache

openp = '('
closep = ')'


@lru_cache(None)
def lvp(s, i):  # lvp ending at i (including i)
    if i <= 0 or s[i] == openp:
        return 0
    if s[i - lvp(s, i - 1) - 1] == openp:
        return lvp(s, i - 1) + 2 + lvp(s, i - lvp(s, i - 1) - 2)
    else:
        return 0


class Solution:
    def longestValidParentheses(self, s: str) -> int:
        m = 0
        for i in range(len(s)):
            m = max(lvp(s, i), m)
        return m

# total_testcases:230
# total_correct:213
# input_formatted:"(()))())("
# expected_output:4
# code_output:8
