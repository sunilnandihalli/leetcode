from functools import lru_cache

openp = '('
closep = ')'


@lru_cache(None)
def lvp(s, i):  # lvp ending at i (including i)
    if s[i] == openp or i == 0:
        return 0
    if s[i - 1] == openp:
        return lvp(s, i - 2) + 2
    elif s[i - lvp(s, i - 1) - 1] == openp:
        return lvp(s, i - 1) + 2
    else:
        return 0

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        m = 0
        for i in range(len(s)):
            m = max(lvp(s, i), m)
        return m

# runtime_error:Line 9: IndexError: string index out of range
# last_testcase:"()"
