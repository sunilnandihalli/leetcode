def remove(m, char):
    m[char] -= 1
    if m[char] == 0:
        m.pop(char)


from functools import lru_cache


def num_defects(m):
    s = sum(m.values())
    max_defects = 0
    for x, j in m.items():
        max_defects = max(max_defects, s - j)
    return max_defects


from collections import defaultdict


class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        i = 0
        j = 0
        ans = 0
        ans_i = 0
        ans_j = 0
        counter = defaultdict(int)

        while i < len(s) and j < len(s):
            while j < len(s) and num_defects(counter) <= k:
                counter[s[j]] += 1
                j += 1
            if j < len(s) and num_defects(counter) > k:
                remove(counter, s[j])
                j -= 1
            if ans < j - i:
                ans = j - i
                ans_i = i
                ans_j = j
            while i < len(s) and num_defects(counter) == k:
                remove(counter, s[i])
                i += 1

        return ans
# leetcode submit region end(Prohibit modification and deletion)

# total_testcases:37
# total_correct:10
# input_formatted:"AAAB", 0
# expected_output:3
# code_output:4
