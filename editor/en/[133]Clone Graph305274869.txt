"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = []):
        self.val = val
        self.neighbors = neighbors
"""


class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        new_nodes = {}
        old_nodes = {}
        front = [node]
        while len(front) > 0:
            cur_node = front.pop()
            cur_new_node = Node(cur_node.val, [])
            old_nodes[cur_node.val] = cur_node
            new_nodes[cur_node.val] = cur_new_node
            for nei in cur_node.neighbors:
                if nei.val not in new_nodes:
                    front.append(nei)
        for k, old_node in old_nodes.items():
            new_node = new_nodes[k]
            for nei in old_node.neighbors:
                new_node.neighbors.append(new_nodes[nei])
        return new_nodes[node.val]


# runtime_error:Line 26: KeyError: <__main__.Node object at 0x7fde9d555d90>
# last_testcase:[[2,4],[1,3],[2,4],[1,3]]
