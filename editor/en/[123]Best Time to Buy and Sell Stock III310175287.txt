trough = 'trough'
peak = 'peak'


def turning_points(x):
    ret = []
    i = 0
    peak_type = trough
    while i < len(x):
        if peak_type == trough:
            while i < len(x) - 1 and x[i + 1] <= x[i]:
                i += 1
            ret.append((i, trough))
            peak_type = peak
        else:
            while i < len(x) - 1 and x[i + 1] >= x[i]:
                i += 1
            ret.append((i, peak))
            peak_type = trough
        i += 1
    return ret


import heapq as h


def max_profit(prices, num_transactions):
    buy = 'buy'
    sell = 'sell'
    tp = turning_points(prices)
    if tp[-1][1] == trough:
        tp.pop()
    heap = []
    while len(tp) > num_transactions * 2:
        i = 0
        min_loss_i = None
        min_loss = None
        while i < len(tp) - 1:
            if min_loss is None or min_loss > abs(prices[tp[i][0]] - prices[tp[i + 1][0]]):
                min_loss = abs(prices[tp[i][0]] - prices[tp[i + 1][0]])
                min_loss_i = i
            i += 1
        tp = tp[:min_loss_i]+tp[min_loss_i+2:]
    ret = 0
    for i in range(0,len(tp),2):
        ret += prices[tp[i+1][0]]-prices[tp[i][0]]
    return ret

def test_turning_points():
    ts = [([0, 0, 1, 2, 3, 2, 1, 2, 3, 3, 4, -1, -1],
           [(1, trough), (4, peak), (6, trough), (10, peak), (12, trough)])]
    for arr, ans in ts:
        actual = turning_points(arr)
        print(arr, ans, actual)
        assert actual == ans


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        return max_profit(prices,2)

# runtime_error:Line 31: IndexError: list index out of range
# last_testcase:[]
