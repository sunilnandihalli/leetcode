from collections import defaultdict


class Solution:
    def alienOrder(self, words: List[str]) -> str:
        i = 1
        directed_edges = []
        while i < len(words):
            s1 = words[i - 1]
            s2 = words[i]
            j = 0
            while j < min(len(s1), len(s2)) and s1[j] == s2[j]:
                j += 1
            if j < min(len(s1), len(s2)):
                directed_edges.append((s1[j], s2[j]))
            i += 1
        zero_in_degree = set()
        in_degree = {}
        for w in words:
            for c in w:
                zero_in_degree.add(c)
                in_degree[c] = 0
        outward_endpoints = defaultdict(list)
        for s, e in directed_edges:
            in_degree[e] += 1
            zero_in_degree.remove(e)
            outward_endpoints[s].append(e)
        ordering = []
        while len(zero_in_degree) > 0:
            x = zero_in_degree.pop()
            del in_degree[x]
            for nei in outward_endpoints[x]:
                in_degree[nei] -= 1
                if in_degree[nei] == 0:
                    zero_in_degree.add(nei)
            ordering.append(x)
        return ''.join(ordering if len(in_degree) == 0 else [])



# runtime_error:Line 26: KeyError: 'b'
# last_testcase:["ac","ab","b"]
